#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

OLD_UX_VERSION=""
OLD_APP_VERSION=""
UX_VERSION=""
APP_VERSION=""
THREATRIX_NET=threatrix-net

CHECK=$(sudo docker exec -it threatrix-threat-center sh -c "cat /var/www/html/assets/version.json 2>/dev/null | grep version")
if [ $? -ne 0 ]; then
	OLD_UX_VERSION=unknown
else
	OLD_UX_VERSION=$(echo $CHECK | grep -o '"version": "[^"]*' | grep -o '[^"]*$' | tr -cd '[:print:]')
fi

CHECK=$(sudo docker exec -it threatrix-hybrid-app cat /opt/threatrix/version 2>/dev/null)
if [ $? -ne 0 ]; then
	OLD_APP_VERSION=unknown
else
	OLD_APP_VERSION=$(echo $CHECK | tr -cd '[:print:]')
fi



banner()
{
  echo $BLUE $UNDERLINE "                                                  " $NORMAL
  echo
  echo $BRIGHT $BLUE "   $REVERSE $@" $NORMAL
  echo "                                            "
  echo $BRIGHT $BLUE "       `date`" $NORMAL
  echo $BLUE $UNDERLINE "                                                  " $NORMAL
  echo
}

banner "Welcome to Threatrix Hybrid Update Utility"
UX=latest
APP=latest
PORT=80
HTTPS=0
ARG0=$(basename "$0")
HOST=$(hostname -f)

usage()
{
  echo "Usage: $BRIGHT $ARG0 -h -u <ux tag> -a <app tag> -p <port number> -s"
  echo " -h : Help"
  echo " -u <ux tag>: Version of the UX image you want to upgrade to. Default is latest"
  echo " -a <app tag>: Version of the APP image you want to upgrade to. Default is latest"
  echo " -p <port number>: Port number which threatrix applcation can use. Default is 80 or 443 based on -s option"
  echo " -s Enable HTTPS."
  exit 0
}

connect_containers()
{
	NETWORKS=$(docker network ls --format '{{.Name}}')
	CONTAINERS=$(docker ps  --format '{{.Names}}')
	TRX_CONTAINERS=("threatrix-hybrid-app", "threatrix-threat-center", "threatrix-db", "rabbitmq")
	echo $GREEN "Disconnecting containers $WHITE ${TRX_CONTAINERS[*]} ...."
	for net in $NETWORKS
	do
		for cont in $CONTAINERS
		do
			if [[ ${TRX_CONTAINERS[@]} =~ $cont ]]
			then
				sudo docker network disconnect $net $cont >& /dev/null
			fi
		done
	done
	echo $GREEN "Connecting containers to $WHITE $THREATRIX_NET ...."
	sudo docker network connect $THREATRIX_NET threatrix-db >> update.log
	if [ $? -ne 0 ]; then
	       	echo $RED "Failed to connect Threatrix database to $WHITE  $THREATRIX_NET. $RED Please correct the problem and upgrade...."
	       	echo $NORMAL
	       	exit
	fi
	sudo docker network connect $THREATRIX_NET rabbitmq >> update.log
	if [ $? -ne 0 ]; then
	       	echo $RED "Failed to connect RabbitMQ to $WHITE $THREATRIX_NET. $RED Please correct the problem and upgrade...."
	        echo $NORMAL
	        exit
	fi

	sudo docker restart threatrix-db rabbitmq >> update.log
	sudo docker network prune -f
}

while getopts ":u:a:p:hs" opt; do
  case ${opt} in
    h ) # process option h
        usage
        exit 1
        ;;
	s ) # Enable HTTPS
        HTTPS=1
		if [ $PORT -eq 80 ]; then
			PORT=443
		fi
        ;;
    u ) # UX Version
        UX=$OPTARG
        ;;
    a ) # App version
        APP=$OPTARG
        ;;
	p ) # App version
        PORT=$OPTARG
        ;;
    default )
        usage
        exit 1
        ;;
    :)
        echo "Error: Option -$OPTARG requires an argument."
        usage
        exit 1
  esac
done

echo  $GREEN "Updating your Hybrid Environment with the following components:"
echo
echo "$BLUE Threat Center: $YELLOW $UX"
echo "$BLUE APP          : $YELLOW $APP"
echo $NORMAL

while true; do
    read -p " Do you want to continue? ($GREEN y $WHITE or $RED n $WHITE) " yn
    case $yn in
        [Yy]* ) echo; echo $GREEN "Proceeding with update..."; echo $NORMAL; break;;
        [Nn]* ) echo; echo $RED "Aborting update!"; echo $NORMAL; exit;;
        * ) echo "Please answer yes or no.";;
    esac
done

# check if threat-network exists. If not, create it and restart all containers to use it.
rm -rf update.log
sudo docker network ls | grep -w $THREATRIX_NET >& /dev/null
if [ $? -eq 0 ]
then
        echo $GREEN "Threatrix Network exists!"
else
        echo $WHITE "Threatrix Network does not exist!"
	echo $GREEN "Creating Threatrix Network.."
	sudo docker network create $THREATRIX_NET >> update.log
	echo $GREEN "Restarting containers to use $WHITE $THREATRIX_NET"
	connect_containers

fi

echo $GREEN "Updating Threatrix App and Threat Center...."
sudo docker container rm -f threatrix-threat-center threatrix-hybrid-app >> update.log
sudo docker pull threatrix/hybrid-app:$APP >> update.log
sudo docker pull threatrix/threat-center:$UX >> update.log

echo $GREEN "Restarting Threatrix App and Threat Center containers...."
sudo docker run -d --restart always --network=$THREATRIX_NET --name threatrix-hybrid-app -e LOCAL_IP=`hostname -I | awk  '{print $1}'` -e THREATRIX_DB_SVC=threatrix-db -e THREATRIX_MQ_SVC=hybrid-mq --hostname hybrid -d threatrix/hybrid-app:$APP >> update.log

if [ $? -ne 0 ]; then 
	echo $RED "Failed to start Threatrix Application. Please correct the problem and update...."
	echo $NORMAL
	exit
fi

if [ $HTTPS -eq 0 ]; then
	sudo docker run -d --network=$THREATRIX_NET --hostname=threatrix-web -p $PORT:80  --restart always --name threatrix-threat-center -e BACKEND=threatrix-hybrid-app -e BACKEND_PORT=8080 threatrix/threat-center:$UX  >> update.log
else
	sudo docker run -d --network=$THREATRIX_NET --hostname=threatrix-web -p $PORT:443 --restart always --name threatrix-threat-center -e BACKEND=threatrix-hybrid-app -e BACKEND_PORT=8080 threatrix/threat-center:$UX  >> update.log
fi

if [ $? -ne 0 ]; then 
	echo $RED "Failed to start Threatrix Threat Center. Please correct the problem and update...."
	echo $NORMAL
	exit
fi

#wait for containers to come up
sleep 10

echo
UX_VERSION=$(docker exec -it threatrix-threat-center cat /var/www/html/assets/version.json | grep version | awk '{ print $2}'| sed 's/"//g' |tr -cd '[:print:]')
CHECK=$(docker exec -it threatrix-threat-center cat /var/www/html/assets/version.json)
if [ $? -ne 0 ]; then
	UX_VERSION="unknown"
fi

APP_VERSION=`docker exec -it threatrix-hybrid-app cat /opt/threatrix/version | tr -cd '[:print:]'`
CHECK=$(docker exec -it threatrix-hybrid-app cat /opt/threatrix/version)
if [ $? -ne 0 ]; then
	APP_VERSION="unknown"
fi

echo $GREEN "Upgraded the following Threatrix components in your Hybrid Environment:"
echo $NORMAL
echo "$BLUE Threat Center: $WHITE from $YELLOW $OLD_UX_VERSION $WHITE to $GREEN $UX_VERSION"
echo "$BLUE APP          : $WHITE from $YELLOW $OLD_APP_VERSION $WHITE to $GREEN $APP_VERSION"
echo
echo $CYAN "Use the following URL to access Threat Center: $WHITE http://$HOST:$PORT/"
echo
banner "Threatrix Hybrid update complete!"
echo $NORMAL
