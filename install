#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)

THREATRIX_NET=threatrix-net

banner()
{
  echo $BLUE $UNDERLINE "                                            " $NORMAL
  echo
  echo $BRIGHT $BLUE "   $REVERSE $@" $NORMAL
  echo "                                            "
  echo $BRIGHT $BLUE "       `date`" $NORMAL
  echo $BLUE $UNDERLINE "                                            " $NORMAL
  echo
}

banner "Welcome to Threatrix Hybrid Install"
UX=latest
APP=latest
DB=latest
PORT=80
MIN_CPU=8
MIN_MEM=30
MIN_DISK=250
skip_check=0
HOST=$(hostname -f)
ARG0=$(basename "$0")
LOG_FILE=install.log

usage()
{
  echo $CYAN  "Usage: $BRIGHT $ARG0 -h -u <ux tag> -a <app tag> -d <db tag>"
  echo "$GREEN -h : $WHITE Help"
  echo "$GREEN -u <ux tag>: $WHITE Version of the UX image you want to upgrade to. Default is latest"
  echo "$GREEN -a <app tag>: $WHITE Version of the APP image you want to upgrade to. Default is latest"
  echo "$GREEN -d <db tag>: $WHITE Version of the DB image you want to upgrade to. Default is latest"
  echo "$GREEN -p <port number>: $WHITE Port number which threatrix applcation can use. Default is 80"
  echo
  exit 1
}

check_disk()
{
    # Get the available disk space in bytes
    available_space=$(df --output=avail /var/lib/docker | tail -n 1)

    # Convert bytes to GB
    available_space_gb=$(echo "scale=2; $available_space / (1024 * 1024)" | bc)

    # Check if available space is greater than or equal to 250GB
    if (( $(echo "$available_space_gb >= $MIN_DISK" | bc -l) )); then
        echo $GREEN "Met minimum disk space requirement of $WHITE $MIN_DISK GB"
    else
        echo
        echo $RED "Only $available_space_gb is available on /var/lib/docker."
        echo $RED "Disk space is insufficient. Minimum disk space requirement is $MIN_DISK GB. Aborting install!"
        echo $NORMAL
        exit 1
    fi
}

check_ram()
{
    # Get the total memory in kilobytes
    total_mem=$(grep MemTotal /proc/meminfo | awk '{print $2}')

    # Convert total memory to gigabytes
    total_mem_gb=$(echo "scale=2; $total_mem / 1024 / 1024" | bc)

    # Define the minimum memory requirement in gigabytes
    minimum_mem_req=$MIN_MEM

    if (( $(echo "$total_mem_gb < $minimum_mem_req" | bc -l) )); then
        echo
        echo $RED "Only $total_mem_gb GB is available. on /var/lib/docker."
        echo $RED "RAM is insufficient. Minimum RAM requirement is $MIN_MEM GB. Aborting install!"
        echo $NORMAL
        exit 1
    else
         echo $GREEN "Met minimum RAM requirement of $WHITE $MIN_MEM GB"
    fi

}

check_cpu()
{
 
    # Get the number of CPU cores
    cpu_cores=$(lscpu | grep "CPU(s):" | awk -F': ' '{print $2}')

    if (( $cpu_cores >= $MIN_CPU )) ; then
        echo $GREEN "Met minimum CPU requirement of $WHITE $MIN_CPU"
    else
        echo
        echo $RED "Only $cpu_cores are available."
        echo $RED "CPU is insufficient. Minimum CPU requirement is $MIN_CPU. Aborting install!"
        echo $NORMAL
        exit 1
    fi
}

check_minimum_requirements()
{
    if [ $skip_check -eq 0 ]
    then
        check_cpu
        check_ram
        check_disk
    fi
}

while getopts ":u:a:d:p:xh" opt; do
  case ${opt} in
    h ) # process option h
        usage
        exit 1
        ;;
    u ) # UX Version
        UX=$OPTARG
        ;;
    a ) # App version
        APP=$OPTARG
        ;;
    d ) # DB Version
        DB=$OPTARG
        ;;
    p ) # App version
        PORT=$OPTARG
        ;;
    x )
        skip_check=1
        ;;

    default )
        usage
        exit 1
        ;;
    :)
        echo $RED "Error: Option -$OPTARG requires an argument."
        usage
        exit 1
  esac
done

# Check if minimumhybrid requirements are met.
check_minimum_requirements
echo
echo $GREEN "Installing the following components in your Hybrid Envirnment:"
echo
echo "$BLUE  Threat Center: $YELLOW $UX"
echo "$BLUE  APP          : $YELLOW $APP"
echo "$BLUE  DB           : $YELLOW $DB"
echo "$BLUE  Rabbit MQ    : $YELLOW rabbitmq:3"
echo $NORMAL
echo

while true; do
    read -p " Do you want to continue? ($GREEN y $WHITE or $RED n $WHITE) " yn
    case $yn in
        [Yy]* ) echo; echo $GREEN "Proceeding with install..."; echo $NORMAL; break;;
        [Nn]* ) echo; echo $RED "Aborting install!"; echo $NORMAL; exit;;
        * ) echo "Please answer yes or no.";;
    esac
done

echo $GREEN "Downloading Containers...."
sudo docker pull threatrix/hybrid-db:$DB >& install.log
if [ $? -ne 0 ]; then
	       	echo $RED "Unable to download containers. Aborting install!"
	       	echo $NORMAL
	       	exit 1
fi
sudo docker pull threatrix/hybrid-app:$APP 2>&1 >> install.log
sudo docker pull threatrix/threat-center:$UX 2>&1 >> install.log
sudo docker pull rabbitmq:3 2>&1 >> install.log

# check if threat-network exists. If not, create it and restart all containers to use it.
sudo docker network ls | grep $THREATRIX_NET >& /dev/null

if [ $? -eq 0 ]
then
        echo $GREEN "Threatrix Network exists!"
else
        echo $WHITE "Threatrix Network does not exist!"
        echo $GREEN "Creating Threatrix Network.."
        echo "Creating Threatrix Network.." >> install.log
        sudo docker network create $THREATRIX_NET >> install.log

fi

echo $GREEN "Starting containers...."
echo "Starting containers...." >> install.log
# Deploy and Run Threatrix Database
sudo docker run -d --network=$THREATRIX_NET --restart always --name threatrix-db --volume /opt/threatrix/db:/var/lib/scylla --hostname threatrix-db -d threatrix/hybrid-db:$DB --smp 2 --memory 4G --developer-mode 1 >> install.log

if [ $? -ne 0 ]; then 
	echo $RED "Failed to start Threatrix database. Please correct the problem and reinstall...."
	echo $NORMAL
	exit
fi

# Install and Run RabbitMQ
sudo docker run -d --network=$THREATRIX_NET --restart always --hostname hybrid-mq --name rabbitmq  -e RABBITMQ_DEFAULT_USER=threatrix -e RABBITMQ_DEFAULT_PASS=DwkEc?#NxSJS_E6M%qcB rabbitmq:3 >> install.log

if [ $? -ne 0 ]; then 
	echo $RED "Failed to start RabbitMQ. Please correct the problem and reinstall...."
	echo $NORMAL
	exit
fi

# wait for database to init
echo $GREEN "Waiting for database to initialize...."
sleep 60
# Setup schema
echo $GREEN "Creating schemas...."
sudo docker exec -it threatrix-db cqlsh -f /opt/threatrix/threatrix-schema.cql >> install.log
sudo docker exec -it threatrix-db cqlsh -f /opt/threatrix/corp-keyspace-schema.cql >> install.log

# Import licenses
sudo docker exec -it threatrix-db cqlsh -e "COPY threatrix.license FROM '/opt/threatrix/license.cql' WITH HEADER=TRUE AND MINBATCHSIZE=1 AND MAXBATCHSIZE=1 AND PAGESIZE=10;" >> install.log

echo $GREEN "Starting Threatrix Components...."
# Deploy and Run Hybrid Server
sudo docker run -d --restart always --network=$THREATRIX_NET --name threatrix-hybrid-app -e LOCAL_IP=`hostname -I | awk  '{print $1}'` -e THREATRIX_DB_SVC=threatrix-db -e THREATRIX_MQ_SVC=hybrid-mq --hostname hybrid -d threatrix/hybrid-app:$APP >> install.log

if [ $? -ne 0 ]; then 
	echo $RED "Failed to start Threatrix Application. Please correct the problem and reinstall...."
	echo $NORMAL
	exit
fi

# Deploy and Run Threat Center
sudo docker run -d --network=$THREATRIX_NET --hostname=threatrix-web -p $PORT:80 --restart always --name threatrix-threat-center -e BACKEND=threatrix-hybrid-app -e BACKEND_PORT=8080 threatrix/threat-center:$UX  >> install.log
if [ $? -ne 0 ]; then 
	echo $RED "Failed to start Threatrix Threat Center. Please correct the problem and reinstall...."
	echo $NORMAL
	exit
fi

echo
UX_VERSION=$(docker exec -it threatrix-threat-center cat /var/www/html/assets/version.json | grep version | awk '{ print $2}' | sed 's/"//g')
if [ $? -ne 0 ]; then
        UX_VERSION=$UX
fi

APP_VERSION=$(docker exec -it threatrix-hybrid-app cat /opt/threatrix/version)
if [ $? -ne 0 ]; then
        APP_VERSION=$APP
fi

echo $GREEN "Installed the following versions of Threatrix components in your Hybrid Envirnment:"
echo
echo "$BLUE  Threat Center: $YELLOW $UX_VERSION"
echo "$BLUE  APP          : $YELLOW $APP_VERSION"
echo
echo $CYAN "Use the following URL to access Threatri Center: $WHITE http://$HOST:$PORT/"
echo
banner "Threatrix Hybrid installation complete!"
echo $NORMAL
